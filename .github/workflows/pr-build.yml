name: PR Workflow
# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events but only for the main branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains jobs called "build", "dockerise"
  ci:
    # The type of runner that the job will run on
    name: Build & Publish
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    outputs:
      registry: ${{ steps.build-image.outputs.registry }}
      repo: ${{ steps.build-image.outputs.repo }}
      tag: ${{ steps.build-image.outputs.tag }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.SIMBO_GH_WORKFLOW_ROLE }}
          role-session-name: workflow-session
          aws-region: ap-southeast-2

#      - name: Unit Test
#        run: |
#          echo "Unit Tests"
#
#      - name: Build Binary
#        run: |
#          chmod +x ./gradlew
#          ./gradlew bootJar

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Bump Version Tag
        id: semver
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch

      - name: Dockerize & Push
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fargate-bg
          IMAGE_TAG: ${{ steps.semver.outputs.new_tag }}
        run: |
          echo "Registry(E) $ECR_REGISTRY"
          echo "Registry(O) ${{ steps.login-ecr.outputs.registry }}"
          echo "::set-output name=registry::$ECR_REPOSITORY"
          echo "::set-output name=repo::$ECR_REPOSITORY"
          echo "::set-output name=tag::$IMAGE_TAG"

  cd:
    name: Deploy
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Outputs from CI
        run: |
          echo ${{ needs.ci.outputs.registry }}
          echo ${{ needs.ci.outputs.registry }}/fargate-bg:${{ needs.ci.outputs.tag }}

#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          role-to-assume: ${{ secrets.SIMBO_GH_WORKFLOW_ROLE }}
#          role-session-name: workflow-session
#          aws-region: ap-southeast-2
#
#      - name: Get Task Definition
#        run: |
#          aws ecs describe-task-definition --task-definition fargate-bg-task --query taskDefinition > task-definition.json
#          cat task-definition.json
#
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: fargate-bg-container
#          image: ${{ needs.ci.outputs.registry }}/fargate-bg:${{ needs.ci.outputs.tag }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: fargate-bg-service
#          cluster: poc-cluster
#          wait-for-service-stability: true